<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>dist-master</artifactId>
        <groupId>com.chen</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>dist-user-service</artifactId>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>
        <!--mybatis-->
        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
        </dependency>

        <!--nacos配置管理依赖-->
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>
        </dependency>

        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
        </dependency>

        <dependency>
            <groupId>com.chen</groupId>
            <artifactId>feign-api</artifactId>
            <version>1.0-SNAPSHOT</version>
            <scope>compile</scope>
        </dependency>

        <!--   Seata和SpringBoot整合依赖
        推荐使用spring-cloud-starter-alibaba-seata，而不要使用seata-spring-boot-starter
        后者没有对feign进行处理，会导致fein调用不传xid，全局事务失效
        -->
        <!-- <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-seata</artifactId>
            <version>2.2.6.RELEASE</version>
            <exclusions>
                <exclusion>
                    <artifactId>seata-spring-boot-starter</artifactId>
                    <groupId>io.seata</groupId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>io.seata</groupId>
            <artifactId>seata-spring-boot-starter</artifactId>
            <version>1.5.1</version>
        </dependency>-->

        <!--  Seata 完成分布式事务的两个相关依赖(Seata会自动使用其中的资源)  -->
        <dependency>
            <groupId>com.github.pagehelper</groupId>
            <artifactId>pagehelper-spring-boot-starter</artifactId>
            <version>1.4.3</version>
        </dependency>
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.58</version>
        </dependency>

        <dependency>
            <groupId>com.chen</groupId>
            <artifactId>dist-common</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
        </dependency>

        <!-- logstash收集日志 -->
        <dependency>
            <groupId>net.logstash.logback</groupId>
            <artifactId>logstash-logback-encoder</artifactId>
            <version>7.2</version>
        </dependency>
        <!-- will be automatically pulled in by Maven's transitivity rules -->
        <dependency>
            <groupId>org.codehaus.janino</groupId>
            <artifactId>janino</artifactId>
            <version>3.1.9</version>
        </dependency>
        <!-- 引入 hutool-->
        <dependency>
            <groupId>cn.hutool</groupId>
            <artifactId>hutool-all</artifactId>
            <version>5.8.9</version>
        </dependency>
    </dependencies>
    <build>
        <finalName>user-service</finalName>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
             </plugin>

            <!--<plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.3.0</version>
                <configuration>
                    <archive>
                        &lt;!&ndash; 生成的jar中，不包含pom.xml和pom.properties这两个文件 &ndash;&gt;
                        <addMavenDescriptor>false</addMavenDescriptor>
                        <manifest>

                            &lt;!&ndash;这个属性特别关键，如果没有这个属性，有时候我们引用的包maven库
               下面可能会有多个包，并且只有一个是正确的，其余的可能是带时间戳的，
               此时会在classpath下面把那个带时间戳的给添加上去，然后我们
               在依赖打包的时候，打的是正确的，所以两头会对不上，报错。&ndash;&gt;

                            <useUniqueVersions>false</useUniqueVersions>

                            &lt;!&ndash; 是否要把第三方jar加入到类构建路径 &ndash;&gt;
                            <addClasspath>true</addClasspath>

                            &lt;!&ndash; classpath的前缀字符串，如果你的jar包都是存放在lib目录下，那么前缀就是lib/，如果这个
               jar本身和依赖包在同一级目录，则不需要添加&ndash;&gt;
                            <classpathPrefix>lib/</classpathPrefix>
                            <mainClass>com.pansky.user.UserApplication</mainClass>
                        </manifest>
                    </archive>
                    &lt;!&ndash;<outputDirectory>${project.build.directory}/output</outputDirectory>
                    <finalName>Test</finalName>&ndash;&gt;
                </configuration>

            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-dependencies</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                           &lt;!&ndash; 拷贝项目依赖包到lib/目录下 &ndash;&gt;
                            <outputDirectory>${project.build.directory}/lib</outputDirectory>
                            &lt;!&ndash;  间接依赖也拷贝 &ndash;&gt;
                           <excludeTransitive>false</excludeTransitive>
                            &lt;!&ndash;  带上版本号 &ndash;&gt;
                           <stripVersion>false</stripVersion>
                       </configuration>
                   </execution>
                </executions>
            </plugin>

         <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <version>2.6</version>
        <executions>
            &lt;!&ndash; 一个execution就是一个目标输入位置，如果想把各种资源拆开放的话，就
            可以创建多个execution，一个资源文件可以被拷贝多份 &ndash;&gt;
            <execution>
                <id>copy-resources</id>
                <phase>package</phase>
                <goals>
                    <goal>copy-resources</goal>
                </goals>
                <configuration>
                    <encoding>UTF-8</encoding>
                    &lt;!&ndash; 资源文件的输出目录 &ndash;&gt;
                    <outputDirectory>${project.build.directory}/config</outputDirectory>
                    <resources>
                        &lt;!&ndash; 资源文件的原始目录，有多个的话就多配几个 &ndash;&gt;
                        <resource>
                            &lt;!&ndash; 原始目录 &ndash;&gt;
                            <directory>src/main/resources</directory>
                            &lt;!&ndash; 是否使用过滤器，如果是的话，需要配置一下才行
                            这个后续再研究，这边没有使用到 &ndash;&gt;
                            <filtering>true</filtering>
                            &lt;!&ndash; 包含哪些文件以及去除调哪些文件等等 &ndash;&gt;
                            <includes>
                                <include>**/*.*</include>
                            </includes>
                            <excludes>
                                <exclude>**/*.json</exclude>
                            </excludes>
                        </resource>
                    </resources>
                </configuration>
            </execution>
        </executions>
    </plugin>-->

        </plugins>

    </build>

</project>